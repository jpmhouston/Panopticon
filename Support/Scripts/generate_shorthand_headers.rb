#!/usr/bin/env ruby
#
#  generate_shorthand_headers.rb
#  Panopticon
#
#  Created by Pierre Houston on 2016-03-16.
#  Copyright Â© 2016 Pierre Houston. All rights reserved.
#

require 'date'

def createShorthandVariantOfHeader(headerFile, outputFile)
    puts "Reading original header:  #{headerFile}"
    
    lines = File.readlines(headerFile)
    outputLines = []
    
    lines.each do |line|
        transformed_line = nil
        
        if line.include?(File.basename(headerFile))
            # replace 
            line.sub!(File.basename(headerFile), File.basename(outputFile))
            
        elsif line.include?("Copyright")
            # add some lines to header comment
            outputLines << line
            outputLines << "//\n"
            line = "//  Generated by script " + File.basename($0) + "\n"
            
        elsif line =~ /@interface .* \(.*\)/
            # substitute category name
            line.sub!(/\)/, "Shorthand)")
            
        elsif line =~ /pan_/
            # remove all instances of "pan_" (case sensitive)
            line.gsub!(/pan_/, "")
        end
        
        outputLines << line
    end
    
    puts "Writing generated header: #{outputFile}"
    
    File.open("#{outputFile}", "w") do |file|
        file.write(outputLines.join)
    end
end

scriptPath = File.expand_path(File.dirname(__FILE__))
Dir.chdir(scriptPath)
Dir.chdir "../../Source/"

puts "Generating shorthand headers in source directory " + Dir.pwd

Dir.glob("**/*+PAN*.h") do |header|
    next if header =~ /Shorthand.h/
    shorthandHeader = header.sub(/.h/, "Shorthand.h")
    
    if File.exists?(shorthandHeader) and File.mtime(shorthandHeader) >= File.mtime(header)
      puts "Skipping generation of up-to-date header: #{shorthandHeader}"
    else
      createShorthandVariantOfHeader(header, shorthandHeader)
    end
end
